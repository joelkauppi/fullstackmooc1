{"version":3,"sources":["services/puhelinluettelo.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newPerson","post","console","log","personId","delete","id","put","Persons","persons","filterValue","deletePerson","setPersons","filter","person","name","toUpperCase","includes","map","key","number","onClick","Form","submitForm","handleNameChange","handleNumberChange","value","onChange","type","Filter","newFilter","filterChange","Notification","message","className","App","useState","setNewPerson","setNewFilterValue","setSuccessMessage","useEffect","personService","event","target","preventDefault","p","window","confirm","find","setTimeout","concat","catch","error","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.58f9efdf.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getPersons = () => {\r\n    return (\r\n        axios.get(baseUrl)\r\n            .then(response => {\r\n                return response.data\r\n                })\r\n    )\r\n}\r\n\r\nconst addPerson = (newPerson) => {\r\n    return(\r\n    axios.post(baseUrl, newPerson) \r\n     .then((response) => {\r\n                console.log('response', response)\r\n                return response.data\r\n            })\r\n    )}\r\n\r\n\r\nconst deletePerson = (personId) => {\r\n    return (\r\n        axios.delete(`${baseUrl}/${personId}`)\r\n            .then(response => {\r\n                console.log(response)\r\n                return response.data\r\n            })\r\n    )\r\n}\r\n\r\nconst updatePerson = (id, newPerson) => {\r\n    console.log('new person', id, newPerson)\r\n    return (\r\n        axios.put(`${baseUrl}/${id}`, newPerson)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    )\r\n}\r\n\r\nexport default {\r\n    getPersons,\r\n    addPerson,\r\n    deletePerson,\r\n    updatePerson\r\n}","import React, { useState, useEffect } from 'react'\nimport personService from './services/puhelinluettelo'\n\nconst Persons = ({persons, filterValue, deletePerson, setPersons}) => {\n\n  return (\n    <div>\n      <ul>\n        {persons.filter(person => person.name.toUpperCase().includes(filterValue.toUpperCase()))\n          .map(person => <li key={person.name}>\n            <div>{person.name} {person.number}</div>\n            <button onClick={() => deletePerson(person)}>Remove</button>\n          </li>)}\n          \n      </ul>\n     </div>\n  )\n}\n\n\nconst Form = ({newPerson, submitForm, handleNameChange, handleNumberChange}) => {\n  return (\n    <div>\n      <form>\n        <div>\n          <div>Name: <input value={newPerson.name} onChange={handleNameChange}/></div>\n          <div>Number <input value={newPerson.number} onChange={handleNumberChange}/></div>\n        </div>\n        <div>\n          <button type=\"submit\" onClick={submitForm}>add</button>\n        </div>\n      </form>\n    </div>\n  )\n}\n\nconst Filter = ({newFilter, filterChange}) => {\n  return(\n    <div>\n      Filter with <input value={newFilter} onChange={filterChange}/>\n    </div>\n  )\n}\n\nconst Notification = ({message, type}) => {\n  if (message === null) {\n    return null\n  }\n\n  return(\n    <div className={type}>\n      {message}\n    </div>\n  )\n}\n\n\nconst App = () => {\n  const [ persons, setPersons] = useState([]) \n  const [ newPerson, setNewPerson ] = useState({name: '', number: ''})\n  const [ newFilter, setNewFilterValue ] = useState('')\n  const [ message, setSuccessMessage] = useState({type:true, message:null })\n\n  const handleNameChange = (event) => setNewPerson({...newPerson, name: event.target.value})\n  const handleNumberChange = (event) => setNewPerson({...newPerson, number: event.target.value})\n  const handleDeleteTrigger = (person) => {\n    if (window.confirm(`Are you sure you want to delete ${person.name}?`)) {\n      personService.deletePerson(person.id)\n      .then(response => {  \n        setPersons(persons.filter(p => p.id !== person.id))\n        setSuccessMessage({\n          type: 'success',\n          message: `${response.data.name} deleted successfully.`\n        }\n        )\n        setTimeout(() => {\n          setSuccessMessage({type:null, message:null})\n        }, 5000)\n      })\n      .catch(error => {\n        setSuccessMessage({\n            type:'error',\n            message: `${error}`\n          }\n        )\n        setTimeout(() => {\n          setSuccessMessage({type:null, message:null})\n        }, 5000)\n      })\n    }\n    }\n  \n  \n\n  useEffect (() => {\n    personService\n      .getPersons()\n        .then(persons => {\n          setPersons(persons)\n        })\n  }, [])\n    \n\n  const handleFilterChange = (event) => {\n    setNewFilterValue(event.target.value)\n    setPersons(persons)\n  }\n\n  const addPerson = (event) => {\n    event.preventDefault()\n    \n    if (!persons.map(p => p.name).includes(newPerson.name)) { \n      personService.addPerson(newPerson)\n        .then(response => {\n            setPersons(persons.concat(response.data))\n            setNewPerson({name: '', number: ''})\n            setSuccessMessage(\n              {\n                type: 'success',\n                message:`${response.data.name} added.`\n              }\n            )\n          setTimeout(() => {\n            setSuccessMessage({type:null, message:null})\n          }, 5000)\n        })\n      .catch(error => {\n        console.log('here2', error.response.data.error)\n        setSuccessMessage(\n          {\n            type: 'error',\n            message: `${error.response.data.error}`\n          }\n        )\n        setTimeout(() => {\n          setSuccessMessage({type:null, message:null})\n        }, 5000)\n        })\n        \n    }\n    else {\n      if(window.confirm(`Are you sure you want to change number for ${newPerson.name}?`)) {\n        const id = persons.find(person => person.name === newPerson.name).id\n        personService.updatePerson(id, newPerson)\n          .then(response => {\n            setPersons(persons.map(person => person.id !== id ? person : response))\n            setSuccessMessage(\n              {\n                type: 'success',\n                message: `Number changed to ${newPerson.number}`\n              }\n              \n            )\n            setTimeout(() => {\n              setSuccessMessage(\n                {type:null, message:null }\n                )\n            }, 5000)\n            setNewPerson({name: '', number: ''})\n        })\n      }\n      \n    }\n    \n  }\n\n \n  return (\n    <div>\n      <h2>Phonebook</h2>      \n      <Notification message={message.message} type={message.type}/>\n      <Filter filterChange={handleFilterChange} newFilter={newFilter}/>\n      <h3>Add new</h3>\n      <Form newPerson={newPerson} submitForm={addPerson} \n        handleNameChange={handleNameChange}\n        handleNumberChange={handleNumberChange}/>\n      <h2>Numbers</h2>\n      <Persons persons={persons} setPersons={setPersons} \n        filterValue={newFilter} deletePerson={handleDeleteTrigger}/>\n    </div>\n  )\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}